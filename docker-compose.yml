version: "3.9"

services:
  backend:
    build:
      dockerfile: Dockerfile
      context: ./backend
    restart: unless-stopped
    volumes:
      - ./backend:/usr/src/app
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      UID: ${UID}
      SECRET: ${SECRET}
      PORT: ${PORT_BACK}
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - 3000:3000
      - 9229:9229
    networks:
      - appjs
      - db_net

  frontend:
    build:
      dockerfile: Dockerfile
      context: ./frontend
    restart: unless-stopped
    volumes:
      - ./frontend:/usr/src/app
    environment:
      PORT: ${PORT_FRONT}
    ports:
      - 4200:4200
    networks:
      - appjs

  postgres:
    image: postgres:15
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -V"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - 35000:5432
    networks:
      - db_net

  postgres_admin:
    image: dpage/pgadmin4:latest
    restart: unless-stopped
    volumes:
      - ./db/pgadmin_servers.json:/pgadmin4/servers.json
    depends_on:
      - postgres
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    ports:
      - 5050:80
    networks:
      - db_net

volumes:
  data:

networks:
  appjs:
    driver: bridge

  db_net:
    driver: bridge
